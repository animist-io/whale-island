Data:

Endpoints  [Addresses]
Authority  Address  // 
Payment    Address  // A funded escrow contract
User    
State       int
FinishState int

stateMap [] [0] { paid: true, endpoint: address OR 0 (meaning 'any') }
                    [1] { status: false, endpoint: address OR 0 (meaning 'any') }
                    etc . . .     

// Tracks state in lockstep . . .                         
isAuthorized int

Every endpoint needs an existing notification contract. The creator of this contract
calls it and it fires an event. The endpoints watch their contract and maintain a DB
of outstanding contracts

// Init() Required to proceed
init(){

    // THIS NEEDS WORK . . .
    if state == 0

      forEach Endpoint:
         
         // Endpoints will have to query chain for transactions that paid 
         // the pool and demand money from the pool when they execute 
         // on its behalf. . . . 

         // Assume they will pay (cheaper than running another loop on success)
         forEach state endpoint must authorize: 
            fees++
            stateMap[state].status = true;

         success = pay endpoint contract fees OR pay pool contract if 'ANY'

         // Undo payment auth if it fails
         if (!success)
           forEach state endpoint must authorize:
              stateMap[state].status = false;

         endpoint.notify( user, authority, address(this) ); 

      state = 1

};

getState constant(){
   return state
}

getEndpointForState constant(state){
   return stateMap[state].endpoint
}

getStatusForState constant (state){
  return stateMap[state].status
}

authAdvance( authorizedUser){
   
   // Check that sender is endpoint
   // Check that previous state was authorized
   // Check that the detected user matches this contract
   // Check that Animist got paid to do this

   if (msg.sender == stateMap[state + 1].endpoint AND 
       isAuthorized == state - 1                  AND
       authorizedUser == User                     AND 
       stateMap[state + 1].status == true)

      isAuthorized += 1;
}

advance(){

   if(msg.sender == authority  AND 
      isAuthorized == state + 1 )

      state +=1;

   if(state == finishState)
      finish();
}

finish(){
   
   // Do something special, pay people, give them tokens etc.
   payment.payUser();
   termination event
   commit suicide

}
